// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (created_at, updated_at, name, monthly_cost, currency, unsubscribe_url, description, category_id, created_by)
VALUES (
NOW(),
NOW(),
$1,
$2,
$3,
$4,
$5,
$6,
$7
)
RETURNING id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by
`

type CreateSubscriptionParams struct {
	Name           string         `json:"name"`
	MonthlyCost    int32          `json:"monthly_cost"`
	Currency       string         `json:"currency"`
	UnsubscribeUrl sql.NullString `json:"unsubscribe_url"`
	Description    sql.NullString `json:"description"`
	CategoryID     uuid.NullUUID  `json:"category_id"`
	CreatedBy      uuid.UUID      `json:"created_by"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.Name,
		arg.MonthlyCost,
		arg.Currency,
		arg.UnsubscribeUrl,
		arg.Description,
		arg.CategoryID,
		arg.CreatedBy,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MonthlyCost,
		&i.Currency,
		&i.UnsubscribeUrl,
		&i.Description,
		&i.CategoryID,
		&i.CreatedBy,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :execresult
DELETE FROM subscriptions
WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSubscription, id)
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by FROM subscriptions
WHERE id = $1
`

func (q *Queries) GetSubscription(ctx context.Context, id uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MonthlyCost,
		&i.Currency,
		&i.UnsubscribeUrl,
		&i.Description,
		&i.CategoryID,
		&i.CreatedBy,
	)
	return i, err
}

const getSubscriptionByNameAndCreator = `-- name: GetSubscriptionByNameAndCreator :one
SELECT id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by FROM subscriptions
WHERE created_by = $1 AND name = $2
`

type GetSubscriptionByNameAndCreatorParams struct {
	CreatedBy uuid.UUID `json:"created_by"`
	Name      string    `json:"name"`
}

func (q *Queries) GetSubscriptionByNameAndCreator(ctx context.Context, arg GetSubscriptionByNameAndCreatorParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByNameAndCreator, arg.CreatedBy, arg.Name)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MonthlyCost,
		&i.Currency,
		&i.UnsubscribeUrl,
		&i.Description,
		&i.CategoryID,
		&i.CreatedBy,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by FROM subscriptions
ORDER BY name ASC
`

func (q *Queries) ListSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MonthlyCost,
			&i.Currency,
			&i.UnsubscribeUrl,
			&i.Description,
			&i.CategoryID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionsForUserId = `-- name: ListSubscriptionsForUserId :many
SELECT id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by FROM subscriptions
WHERE created_by = $1
ORDER BY name ASC
`

func (q *Queries) ListSubscriptionsForUserId(ctx context.Context, createdBy uuid.UUID) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionsForUserId, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MonthlyCost,
			&i.Currency,
			&i.UnsubscribeUrl,
			&i.Description,
			&i.CategoryID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetSubscriptions = `-- name: ResetSubscriptions :many
DELETE FROM subscriptions
RETURNING id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by
`

func (q *Queries) ResetSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, resetSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MonthlyCost,
			&i.Currency,
			&i.UnsubscribeUrl,
			&i.Description,
			&i.CategoryID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET name = $2, monthly_cost = $3, currency=$4, unsubscribe_url=$5, description=$6, category_id=$7, updated_at=NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at, monthly_cost, currency, unsubscribe_url, description, category_id, created_by
`

type UpdateSubscriptionParams struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	MonthlyCost    int32          `json:"monthly_cost"`
	Currency       string         `json:"currency"`
	UnsubscribeUrl sql.NullString `json:"unsubscribe_url"`
	Description    sql.NullString `json:"description"`
	CategoryID     uuid.NullUUID  `json:"category_id"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscription,
		arg.ID,
		arg.Name,
		arg.MonthlyCost,
		arg.Currency,
		arg.UnsubscribeUrl,
		arg.Description,
		arg.CategoryID,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MonthlyCost,
		&i.Currency,
		&i.UnsubscribeUrl,
		&i.Description,
		&i.CategoryID,
		&i.CreatedBy,
	)
	return i, err
}
