// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cards.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards (created_at, updated_at, name, owner, expires_at)
VALUES (NOW(),
        NOW(),
        $1,
        $2,
        $3)
RETURNING id, created_at, updated_at, name, owner, expires_at
`

type CreateCardParams struct {
	Name      string    `json:"name"`
	Owner     uuid.UUID `json:"owner"`
	ExpiresAt time.Time `json:"expires_at"`
}

type CreateCardRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Owner     uuid.UUID `json:"owner"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (CreateCardRow, error) {
	row := q.db.QueryRowContext(ctx, createCard, arg.Name, arg.Owner, arg.ExpiresAt)
	var i CreateCardRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Owner,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteCard = `-- name: DeleteCard :execresult
DELETE
FROM cards
WHERE id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCard, id)
}

const getCard = `-- name: GetCard :one
SELECT id, name, owner, created_at, updated_at, expires_at
FROM cards
WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getCardByName = `-- name: GetCardByName :one
SELECT id, name, owner, created_at, updated_at, expires_at
FROM cards
WHERE name = $1 AND owner = $2
`

type GetCardByNameParams struct {
	Name  string    `json:"name"`
	Owner uuid.UUID `json:"owner"`
}

func (q *Queries) GetCardByName(ctx context.Context, arg GetCardByNameParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByName, arg.Name, arg.Owner)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, name, owner, created_at, updated_at, expires_at
FROM cards
ORDER BY created_at ASC
`

func (q *Queries) ListCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, listCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCardsForOwner = `-- name: ListCardsForOwner :many
SELECT id, name, owner, created_at, updated_at, expires_at
FROM cards
WHERE owner = $1
`

func (q *Queries) ListCardsForOwner(ctx context.Context, owner uuid.UUID) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, listCardsForOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetCards = `-- name: ResetCards :many
DELETE
FROM cards
RETURNING id, name, owner, created_at, updated_at, expires_at
`

func (q *Queries) ResetCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, resetCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCard = `-- name: UpdateCard :one
UPDATE cards
SET name       = $2,
    expires_at = $3,
    updated_at = $4
WHERE id = $1
RETURNING id, name, owner, created_at, updated_at, expires_at
`

type UpdateCardParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	ExpiresAt time.Time `json:"expires_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, updateCard,
		arg.ID,
		arg.Name,
		arg.ExpiresAt,
		arg.UpdatedAt,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
